(()=>{"use strict";const e=function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:.8;const n=(Math.random()<o?1:-1)*Math.random()*t*e;return Math.max(.2,e+n)},t=e=>{const[t,o]=e.split(" ");let[n,l]=t.split(":").map(Number);return"PM"===o&&12!==n?n+=12:"AM"===o&&12===n&&(n=0),n+l/60};let o=null,n=0,l=0,r=[];let s=.1,i=1,a=!1,c=null;const u=(o,n,l,r,s,i)=>{const a=(e=>{const o=3.5;let n,l=t(e);if(l>=o&&l<=23){const e=19.5,t=10.5/e,r=(l-o)/e;n=Math.sin(r*Math.PI),n*=r<=t?r/t:1-(r-t)/(1-t)}else n=0;return.8+(1.2-.8)*n})(l),c=function(o){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:23,l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:7;const r=.5*Math.random()+1.5,s=t(o);let i;if(s>=n||s<l)i=1;else if(s<l+r){const t=(s-l)/r;i=1-.8*Math.pow(t,2),i=e(i,.13,.58)}else if(s>=n-r){const t=(n-s)/r;i=1-.8*Math.pow(t,2),i=e(i,.15,.25)}else i=.2,i=e(i,1.5,.88);return i}(l,r,s),u=.27*a*(1.3-.5*c);let d=o*Math.exp(-u*n);return console.log(`dodo Meal ${i} at time ${l}: \n    Circadian Factor: ${a.toFixed(3)}, \n    Sedentarism Factor: ${c.toFixed(3)}, \n    Modified Decay (k): ${u.toFixed(3)}, \n    Contribution: ${d.toFixed(3)}`),d};function d(){if(a)return;n=+(n+s).toFixed(5),console.log("Current Time (Worker Hour):",n);const e=function(e){const t=(6+e)%24,o=Math.floor(t),n=Math.floor(t%1*60),l=o%12||12,r=o>=12,s=n.toString().padStart(2,"0");return`${l}:${s} ${r?"PM":"AM"}`}(n);console.log(`[worker] Current ${o.name} Simulation Time:`,e),r=r.filter((e=>n-e.timeEaten<12));let t=0;r.forEach(((l,r)=>{const s=n-l.timeEaten;if(s>0){const n=u(l.beta,s,e,o.fullSedentarismStartHour,o.fullSedentarismEndHour,r);t+=n,console.log(`Meal ${r+1} at time (hour) ${l.timeEaten} contributes ${n.toFixed(3)} to fullness.`)}})),l=Math.min(t,1),console.log("Calculated Fullness:",l),postMessage({type:"UPDATE_DATA",time:n,fullness:l,data:r})}function m(){c||(c=setInterval(d,100),console.log("Worker simulation started."))}m(),onmessage=function(e){const{type:t,amount:u,multiplier:d,data:f}=e.data;if("ADD_MEAL"===t)r.push({beta:u,timeEaten:n}),console.log(`Meal added: beta=${u}, timeEaten=${n}`);else if("RESET"===t)n=0,l=0,r=[],postMessage({type:"RESET_COMPLETE"}),console.log("Worker reset.");else if("PAUSE"===t)console.log("Worker PAUSED!"),a=!0,c&&(clearInterval(c),c=null,console.log("Worker simulation stopped."));else if("RESUME"===t)a=!1,m(),console.log("Worker resumed.");else if("SET_SPEED"===t){i=d/3600;s=.1/i-0,console.log(`Updated simulation speed: multiplier=${i}, functionTimeScale=${s}`)}else"INITIALIZE_ARCHETYPE"===t&&(o=f,console.log("Worker received workerArchetype:",f))}})();
//# sourceMappingURL=328.7305d138.chunk.js.map